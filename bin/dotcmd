#!/bin/bash
#
# Control dotfiles
#
# This file must should be located in $DOT_DIR/bin
#
DOT_CMD=$(basename $0)
DOT_DIR=$(cd $(realpath $(dirname $0)); cd ..; pwd)

USAGE="Usage: $DOT_CMD <sub> <opts>"

set -e

function ask {
    echo "eval? " $(printf ":%s:" $@)
    read
    eval $@
}

function die {
    echo $@ >&2
    exit 1
}

function do_hoist {
    src="$1"
    name="$(basename "$src")"
    tar="$DOT_DIR/$name"
    [[ ! -e "$tar" ]] || die "File exists $tar"
    mv "$src" "$tar"
    ln -s "$tar" "$src"
    (
        cd "$DOT_DIR"
        git add "$tar"
        git commit -m "Added $tar"
        git push
    )
}

function do_checkout {
    # always checkout to homedir
    name=$(basename $1)
    tar="$HOME/$name"
    [[ ! -e $tar ]] || die "File exists: $tar"
    # always read from DOT_DIR
    src="$DOT_DIR/$name"
    [[ -e $src ]] || die "Not found: $src"
    ln -s "$src" "$tar"
}

function do_restore {
    tar="$1"
    [[ -h "$tar" ]] || die "Not a symlink: $tar"
    src="$DOT_DIR/$(basename $(readlink "$1"))"
    [[ -e "$src" ]] || die "Not found: $src"
    rm "$tar"
    mv "$src" "$tar"
    (
        cd "$DOT_DIR"
        git add "$src"
        git commit -m "Removed $src"
        git push
    )
}
cmd=$1
shift
case $cmd in
    "hoist")
        while [[ $# > 0 ]]
        do
            do_hoist "$1"
            shift
        done
        exit 0;
        ;;
    "checkout")
        while [[ $# > 0 ]]
        do
            do_checkout "$1"
            shift
        done
        exit 0;
        ;;
    "restore")
        while [[ $# > 0 ]]
        do
            do_restore "$1"
            shift
        done
        exit 0;
        ;;
    "pull")
        (
            cd "$DOT_DIR"
            git pull
        )
        exit 0;
        ;;
    "push")
        (
            cd "$DOT_DIR"
            git diff
            git commit -a # invokes editor
            git push
        )
        exit 0;
        ;;
    *)
        echo "xxx $USAGE"
        exit 0;
        ;;
esac
